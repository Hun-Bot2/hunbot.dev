---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import TranslateButton from '../components/TranslateButton.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';

// 최신 포스트 6개 가져오기
const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
).slice(0, 6);

// 포스트 데이터를 JSON으로 변환 (클라이언트에서 사용)
const postsData = posts.map(post => ({
	id: post.id,
	title: post.data.title,
	date: post.data.pubDate.toISOString(),
	tags: post.data.tags || [],
	description: post.data.description
}));

// 태그와 카테고리 수집
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];
const categories = [...new Set(posts.map(post => post.data.category || 'General'))];
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		
		<!-- 모듈화된 스타일시트 임포트 -->
		<link rel="stylesheet" href="/styles/neuralNetwork.css" />
		<link rel="stylesheet" href="/styles/controls.css" />
	
	</head>
	<body>
		<Header />
		
		<!-- 히어로 섹션 with 3D Neural Network -->
		<section class="relative h-[60vh] lg:h-[70vh] bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 overflow-hidden">
			<!-- 3D 네트워크 캔버스 (배경) -->
			<div class="absolute inset-0 z-10 pointer-events-none" id="neural-network-3d">
			</div>
		</section>

		<!-- 메인 컨텐츠 섹션 -->
		<div class="max-w-6xl mx-auto px-6 py-16 space-y-16">
			
			<!-- 카테고리 & 태그 섹션 - Fuwari 스타일 -->
			<section class="grid grid-cols-1 lg:grid-cols-2 gap-12">
				<div class="space-y-6">
					<h2 class="text-2xl font-bold text-slate-800 dark:text-slate-200">Categories</h2>
					<div class="flex flex-wrap gap-3">
						{categories.map((category) => (
							<span class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-800 hover:bg-purple-100 dark:hover:bg-purple-900/30 hover:text-purple-600 dark:hover:text-purple-400 rounded-full transition-all duration-300 cursor-pointer">
								{category}
								<span class="text-xs text-slate-500 dark:text-slate-400">
									{posts.filter(post => post.data.category === category).length}
								</span>
							</span>
						))}
					</div>
				</div>
				<div class="space-y-6">
					<h2 class="text-2xl font-bold text-slate-800 dark:text-slate-200">Tags</h2>
					<div class="flex flex-wrap gap-3">
						{allTags.slice(0, 12).map((tag) => (
							<span class="px-3 py-1 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-100 dark:bg-slate-800 hover:bg-cyan-100 dark:hover:bg-cyan-900/30 hover:text-cyan-600 dark:hover:text-cyan-400 rounded-md transition-all duration-300 cursor-pointer">
								{tag}
							</span>
						))}
					</div>
				</div>
			</section>

			<!-- 포스트 목록 - useHooks 스타일 -->
			<section class="space-y-8">
				<h2 class="text-3xl font-bold text-slate-800 dark:text-slate-200">Recent Posts</h2>
				
				<div class="space-y-4">
					{posts.map((post) => (
						<article class="group">
							<a href={`/blog/${post.id}/`} class="block p-6 bg-white dark:bg-slate-900 hover:bg-slate-50 dark:hover:bg-slate-800 border border-slate-200 dark:border-slate-700 hover:border-purple-300 dark:hover:border-purple-600 rounded-xl transition-all duration-300 hover:-translate-y-1 hover:shadow-lg">
								<div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
									<div class="flex-1 space-y-3">
										<div class="flex items-center gap-4 text-sm text-slate-500 dark:text-slate-400">
											<time class="font-medium">
												<FormattedDate date={post.data.pubDate} />
											</time>
											{post.data.category && (
												<span class="px-2 py-1 text-xs font-semibold text-purple-600 dark:text-purple-400 bg-purple-100 dark:bg-purple-900/30 rounded">
													{post.data.category}
												</span>
											)}
										</div>
										
										<h3 class="text-xl font-bold text-slate-900 dark:text-slate-100 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors duration-300">
											{post.data.title}
										</h3>
										
										{post.data.description && (
											<p class="text-slate-600 dark:text-slate-300 leading-relaxed">
												{post.data.description}
											</p>
										)}
										
										{post.data.tags && (
											<div class="flex flex-wrap gap-2">
												{post.data.tags.slice(0, 4).map((tag: string) => (
													<span class="px-2 py-1 text-xs font-medium text-slate-600 dark:text-slate-400 bg-slate-100 dark:bg-slate-800 rounded group-hover:bg-purple-100 dark:group-hover:bg-purple-900/30 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-all duration-300">
														{tag}
													</span>
												))}
											</div>
										)}
									</div>
									
									<div class="flex items-center text-sm font-medium text-purple-600 dark:text-purple-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
										Read more
										<svg class="w-4 h-4 ml-1 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
										</svg>
									</div>
								</div>
							</a>
						</article>
					))}
				</div>
				
				<div class="text-center pt-8">
					<a 
						href="/blog" 
						class="inline-flex items-center gap-2 px-6 py-3 text-base font-medium text-purple-600 dark:text-purple-400 bg-purple-50 dark:bg-purple-900/20 hover:bg-purple-100 dark:hover:bg-purple-900/40 border border-purple-200 dark:border-purple-700 hover:border-purple-300 dark:hover:border-purple-600 rounded-lg transition-all duration-300"
					>
						View all posts
						<svg class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
						</svg>
					</a>
				</div>
			</section>
		</div>
		
		<Footer />

		<!-- 모듈화된 JavaScript 로드 -->
		<script type="module" define:vars={{ postsData }}>
			// THREE.js 라이브러리 로드
			import * as THREE from 'https://cdn.skypack.dev/three@0.132.2';
			
			// 커스텀 모듈들 로드
			import { NeuralNetwork3D } from '/scripts/neuralNetwork.js';
			
			// 전역 THREE 객체 설정 (모듈에서 사용하기 위해)
			window.THREE = THREE;
			
			// Neural Network 초기화
			document.addEventListener('DOMContentLoaded', async () => {
				try {
					const neuralNetwork = new NeuralNetwork3D(postsData);
					await neuralNetwork.init();
					
					// 전역 참조 저장 (디버깅용)
					window.neuralNetwork = neuralNetwork;
					
					console.log('🧠 Neural Network Blog initialized!');
					console.log('💡 단축키: Space(재생/일시정지), Ctrl+R(리셋), 마우스휠/트랙패드(줌)');
				} catch (error) {
					console.error('❌ Failed to initialize Neural Network:', error);
					
					// 폴백 메시지 표시
					const container = document.getElementById('neural-network-3d');
					if (container) {
						container.innerHTML = `
							<div class="flex items-center justify-center h-full text-slate-400 text-lg text-center">
								<div class="space-y-4">
									<p>🧠 3D Neural Network을 로드하는 중 문제가 발생했습니다.</p>
									<p>브라우저를 새로고침해 주세요.</p>
								</div>
							</div>
						`;
					}
				}
			});
		</script>
	</body>
</html>