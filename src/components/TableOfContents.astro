---
// TableOfContents 컴포넌트
---

<div id="table-of-contents" class="fixed top-24 right-5 w-72 bg-white/95 dark:bg-slate-800/95 backdrop-blur-lg border border-slate-200 dark:border-slate-600 rounded-xl p-6 shadow-lg shadow-slate-900/10 dark:shadow-slate-900/30 max-h-[calc(100vh-12rem)] overflow-y-auto z-30 transition-all duration-300 opacity-0 translate-x-full lg:opacity-100 lg:translate-x-0 select-none">
	<div id="toc-header" class="flex items-center justify-between mb-4 pb-3 border-b border-slate-200 dark:border-slate-600 cursor-move">
		<h3 class="text-lg font-semibold text-slate-800 dark:text-slate-100 m-0 flex items-center gap-2">
			<svg class="w-4 h-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path>
			</svg>
			목차
		</h3>
		<button id="toc-toggle" class="p-1 text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 rounded transition-all duration-200" aria-label="목차 토글">
			<svg class="w-4 h-4 transition-transform duration-200" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
				<polyline points="6,9 12,15 18,9"></polyline>
			</svg>
		</button>
	</div>
	<nav id="toc-nav" class="transition-all duration-300 overflow-hidden">
		<ul id="toc-list" class="list-none p-0 m-0 space-y-2">
			<!-- 목차 항목들이 JavaScript로 동적 생성됩니다 -->
		</ul>
	</nav>
</div>

<style>
	/* 드래그 상태 스타일 */
	.dragging {
		@apply cursor-grabbing shadow-2xl shadow-purple-500/40 scale-105;
		transition: none !important;
		z-index: 9999 !important;
	}
	
	.drag-handle:hover {
		@apply bg-slate-100 dark:bg-slate-700;
	}
	
	/* 토글 상태 스타일 */
	.collapsed svg {
		transform: rotate(-90deg);
	}
	
	.collapsed nav {
		max-height: 0;
		opacity: 0;
	}
	
	/* 활성 링크 스타일 */
	.toc-link {
		@apply block text-slate-600 dark:text-slate-400 no-underline px-3 py-1.5 rounded-md text-sm leading-5 transition-all duration-200 border-l-2 border-transparent;
	}
	
	.toc-link:hover {
		@apply bg-slate-50 dark:bg-slate-700 text-slate-700 dark:text-slate-300 border-l-purple-500;
	}
	
	.toc-link.active {
		@apply bg-gradient-to-r from-purple-500 to-pink-500 text-white font-medium border-l-purple-500 shadow-lg shadow-purple-500/30;
	}
	
	/* 헤딩 레벨별 들여쓰기 */
	.toc-h2 { @apply pl-3; }
	.toc-h3 { @apply pl-6; }
	.toc-h4 { @apply pl-9; }
	.toc-h5 { @apply pl-12; }
	/* .toc-h6 { @apply pl-13; } */
	
	/* 모바일 반응형 */
	@media (max-width: 1023px) {
		#table-of-contents {
			@apply translate-x-full opacity-0;
		}
		
		#table-of-contents.mobile-visible {
			@apply translate-x-0 opacity-100;
		}
	}
	
	@media (max-width: 768px) {
		#table-of-contents {
			@apply w-[calc(100vw-2.5rem)] right-5 left-5 max-h-[60vh];
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		const tocContainer = document.getElementById('table-of-contents');
		const tocList = document.getElementById('toc-list');
		const tocToggle = document.getElementById('toc-toggle');
		const tocNav = document.getElementById('toc-nav');
		const tocHeader = document.getElementById('toc-header');
		
		if (!tocContainer || !tocList || !tocHeader) return;
		
		// 헤딩 요소들 수집
		const headings = document.querySelectorAll('.prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6');
		
		if (headings.length === 0) {
			tocContainer.style.display = 'none';
			return;
		}
		
		// 목차 생성
		headings.forEach((heading, index) => {
			const headingElement = heading as HTMLElement;
			// ID가 없으면 생성
			if (!headingElement.id) {
				headingElement.id = `heading-${index}`;
			}
			
			const li = document.createElement('li');
			const a = document.createElement('a');
			
			a.href = `#${headingElement.id}`;
			a.textContent = headingElement.textContent || '';
			a.className = `toc-link toc-${headingElement.tagName.toLowerCase()}`;
			
			li.appendChild(a);
			if (tocList) {
				tocList.appendChild(li);
			}
		});
		
		// 토글 기능
		if (tocToggle) {
			tocToggle.addEventListener('click', function() {
				tocContainer.classList.toggle('collapsed');
			});
		}
		
		// 드래그 기능 구현
		let isDragging = false;
		let dragOffset = { x: 0, y: 0 };
		let currentPosition = { x: 0, y: 0 };
		
		// 마우스 다운 이벤트 (드래그 시작)
		tocHeader.addEventListener('mousedown', function(e) {
			// 토글 버튼 클릭은 드래그하지 않음
			if (tocToggle && (e.target === tocToggle || tocToggle.contains(e.target as Node))) {
				return;
			}
			
			isDragging = true;
			tocContainer.classList.add('dragging');
			
			const rect = tocContainer.getBoundingClientRect();
			dragOffset.x = e.clientX - rect.left;
			dragOffset.y = e.clientY - rect.top;
			
			// 현재 위치 저장
			currentPosition.x = rect.left;
			currentPosition.y = rect.top;
			
			// 마우스 커서 변경
			document.body.style.cursor = 'grabbing';
			
			e.preventDefault();
		});
		
		// 마우스 이동 이벤트 (드래그 중)
		document.addEventListener('mousemove', function(e) {
			if (!isDragging) return;
			
			const newX = e.clientX - dragOffset.x;
			const newY = e.clientY - dragOffset.y;
			
			// 화면 경계 체크
			const maxX = window.innerWidth - tocContainer.offsetWidth;
			const maxY = window.innerHeight - tocContainer.offsetHeight;
			
			currentPosition.x = Math.max(0, Math.min(newX, maxX));
			currentPosition.y = Math.max(0, Math.min(newY, maxY));
			
			// 위치 업데이트
			tocContainer.style.left = currentPosition.x + 'px';
			tocContainer.style.top = currentPosition.y + 'px';
			tocContainer.style.right = 'auto';
			tocContainer.style.transform = 'none';
			
			e.preventDefault();
		});
		
		// 마우스 업 이벤트 (드래그 종료)
		document.addEventListener('mouseup', function() {
			if (!isDragging) return;
			
			isDragging = false;
			tocContainer.classList.remove('dragging');
			document.body.style.cursor = '';
			
			// 위치를 localStorage에 저장
			localStorage.setItem('toc-position', JSON.stringify(currentPosition));
		});
		
		// 저장된 위치 복원
		function restorePosition() {
			if (!tocContainer) return;
			
			const savedPosition = localStorage.getItem('toc-position');
			if (savedPosition) {
				try {
					const position = JSON.parse(savedPosition);
					
					// 화면 크기가 변경되었을 수 있으므로 경계 체크
					const maxX = window.innerWidth - tocContainer.offsetWidth;
					const maxY = window.innerHeight - tocContainer.offsetHeight;
					
					currentPosition.x = Math.max(0, Math.min(position.x, maxX));
					currentPosition.y = Math.max(0, Math.min(position.y, maxY));
					
					tocContainer.style.left = currentPosition.x + 'px';
					tocContainer.style.top = currentPosition.y + 'px';
					tocContainer.style.right = 'auto';
					tocContainer.style.transform = 'none';
				} catch (e) {
					console.warn('Failed to restore TOC position:', e);
				}
			}
		}
		
		// 위치 초기화 함수
		function resetPosition() {
			if (!tocContainer) return;
			
			tocContainer.style.left = '';
			tocContainer.style.top = '';
			tocContainer.style.right = '';
			tocContainer.style.transform = '';
			localStorage.removeItem('toc-position');
		}
		
		// 더블클릭으로 위치 초기화
		tocHeader.addEventListener('dblclick', function() {
			resetPosition();
		});
		
		// 현재 위치 하이라이트
		const tocLinks = tocList.querySelectorAll('a');
		
		function updateActiveLink() {
			let currentHeading: Element | null = null;
			const scrollTop = window.pageYOffset;
			
			headings.forEach(heading => {
				const rect = heading.getBoundingClientRect();
				if (rect.top <= 100) {
					currentHeading = heading;
				}
			});
			
			tocLinks.forEach(link => link.classList.remove('active'));
			
			if (currentHeading && (currentHeading as HTMLElement).id) {
				const activeLink = tocList?.querySelector(`a[href="#${(currentHeading as HTMLElement).id}"]`);
				if (activeLink) {
					activeLink.classList.add('active');
				}
			}
		}
		
		// 스크롤 이벤트 리스너
		let ticking = false;
		window.addEventListener('scroll', function() {
			if (!ticking) {
				requestAnimationFrame(function() {
					updateActiveLink();
					ticking = false;
				});
				ticking = true;
			}
		});
		
		// 초기 활성 링크 설정
		updateActiveLink();
		
		// 부드러운 스크롤
		tocLinks.forEach(link => {
			link.addEventListener('click', function(e) {
				e.preventDefault();
				const href = this.getAttribute('href');
				if (href) {
					const targetId = href.slice(1);
					const targetElement = document.getElementById(targetId);
					
					if (targetElement) {
						const offsetTop = targetElement.offsetTop - 100;
						window.scrollTo({
							top: offsetTop,
							behavior: 'smooth'
						});
					}
				}
			});
		});
		
		// 화면 크기에 따른 TOC 표시 제어
		function handleTocVisibility() {
			if (!tocContainer) return;
			
			const isDesktop = window.innerWidth > 1024;
			
			if (isDesktop) {
				// 데스크톱: 자동으로 표시
				tocContainer.classList.remove('mobile-visible');
				
				// 기존 모바일 토글 버튼 제거
				const existingBtn = document.querySelector('.mobile-toc-toggle');
				if (existingBtn) {
					existingBtn.remove();
				}
			} else {
				// 모바일/태블릿: 토글 버튼으로 제어
				// 모바일 토글 버튼이 없으면 생성
				if (!document.querySelector('.mobile-toc-toggle')) {
					const tocToggleBtn = document.createElement('button');
					tocToggleBtn.innerHTML = '📋 목차';
					tocToggleBtn.className = 'mobile-toc-toggle fixed top-20 right-5 z-50 bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 px-4 py-2 rounded-lg text-sm font-medium cursor-pointer shadow-lg shadow-purple-500/30 transition-all duration-200 hover:shadow-xl hover:scale-105';
					
					tocToggleBtn.addEventListener('click', function() {
						if (tocContainer) {
							tocContainer.classList.toggle('mobile-visible');
						}
					});
					
					document.body.appendChild(tocToggleBtn);
					
					// 외부 클릭 시 TOC 닫기
					document.addEventListener('click', function(e) {
						const target = e.target as Node;
						if (tocContainer && !tocContainer.contains(target) && !tocToggleBtn.contains(target)) {
							tocContainer.classList.remove('mobile-visible');
						}
					});
				}
			}
		}
		
		// 초기 실행
		handleTocVisibility();
		
		// 리사이즈 이벤트 리스너
		window.addEventListener('resize', handleTocVisibility);
	});
</script> 