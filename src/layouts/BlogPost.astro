---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TableOfContents from '../components/TableOfContents.astro';
import Breadcrumb from '../components/Breadcrumb.astro';
import { SITE_TITLE, AUTHOR, AUTHOR_EMAIL, SOCIAL_LINKS } from '../consts';

type Props = CollectionEntry<'blog'>['data'] & {
	lang?: string;
};

const { title, description, pubDate, updatedDate, heroImage, tags = [], lang = 'ko' } = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const schema = {
  "@context": "https://schema.org",
  "@type": "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.href
  },
  "headline": title,
  "description": description,
	"image": heroImage ? new URL(heroImage, Astro.site).href : new URL('/placeholder-social.jpg', Astro.site).href,
  "datePublished": pubDate.toISOString(),
  "dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
  "author": {
    "@type": "Person",
    "name": AUTHOR,
    "url": new URL(Astro.url.origin).href,
    "email": AUTHOR_EMAIL,
    "sameAs": [
      SOCIAL_LINKS.github,
      SOCIAL_LINKS.linkedin
    ]
  },
  "publisher": {
    "@type": "Organization",
    "name": SITE_TITLE,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/favicon.svg', Astro.site).href
    }
  }
};
---

<html lang={lang}>
	<head>
				<BaseHead title={title} description={description} canonicalURL={canonicalURL.href} image={heroImage} />
		<script type="application/ld+json" set:html={JSON.stringify(schema)} />
		<!-- Essential SEO meta tags -->
		<meta property="og:type" content="article" />
		<meta property="article:author" content="Hun-Bot" />
		<meta property="article:published_time" content={pubDate.toISOString()} />
		{updatedDate && <meta property="article:modified_time" content={updatedDate.toISOString()} />}
		{tags.map(tag => <meta property="article:tag" content={tag} />)}
	</head>

	<body>
		<Header />
		<main class="max-w-4xl mx-auto px-6 py-8">
			<article>
				<!-- Hero Image -->
				{heroImage && (
					<div class="mb-8">
						<img 
							src={heroImage}
							alt={title}
							class="w-full rounded-lg shadow-sm"
						/>
					</div>
				)}
				
				<!-- Breadcrumb Navigation -->
				<Breadcrumb items={[
					{ name: "Home", href: "/" },
					{ name: "Blog", href: "/blog" },
					{ name: title }
				]} />
				
				<!-- Title Section -->
				<div class="mb-8 pb-6 border-b border-slate-200 dark:border-slate-700">
					<!-- Date -->
					<div class="mb-4 text-slate-600 dark:text-slate-400 text-sm">
						<FormattedDate date={pubDate} />
						{updatedDate && (
							<div class="text-slate-500 dark:text-slate-400 text-xs mt-1">
								Last updated: <FormattedDate date={updatedDate} />
							</div>
						)}
					</div>
					
					<!-- Title -->
					<h1 class="text-2xl sm:text-3xl font-bold text-slate-900 dark:text-slate-100 leading-tight tracking-tight mb-4">
						{title}
					</h1>
					
					<!-- Tags -->
					{tags && tags.length > 0 && (
						<div class="flex flex-wrap gap-2 mt-4">
							{tags.map((tag: string) => (
								<span class="inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium border border-slate-600 text-slate-200 bg-transparent">
									{tag}
								</span>
							))}
						</div>
					)}
				</div>
				
				<!-- Main Content -->
				<div class="prose prose-slate max-w-none text-slate-200 leading-relaxed text-base
					[&>h1]:text-2xl sm:[&>h1]:text-3xl [&>h1]:font-bold [&>h1]:mt-0 [&>h1]:mb-4 [&>h1]:text-slate-900 [&>h1]:dark:text-white [&>h1]:leading-tight [&>h1]:tracking-tight
					[&>h2]:text-xl sm:[&>h2]:text-2xl [&>h2]:font-semibold [&>h2]:mt-8 [&>h2]:mb-4 [&>h2]:text-slate-800 [&>h2]:dark:text-slate-50 [&>h2]:leading-tight
					[&>h3]:text-lg sm:[&>h3]:text-xl [&>h3]:font-semibold [&>h3]:mt-6 [&>h3]:mb-3 [&>h3]:text-slate-800 [&>h3]:dark:text-slate-50 [&>h3]:leading-tight
					[&>h4]:text-base sm:[&>h4]:text-lg [&>h4]:font-semibold [&>h4]:mt-5 [&>h4]:mb-2 [&>h4]:text-slate-800 [&>h4]:dark:text-slate-50
					[&>h5]:text-base sm:[&>h5]:text-lg [&>h5]:font-semibold [&>h5]:mt-5 [&>h5]:mb-2 [&>h5]:text-slate-800 [&>h5]:dark:text-slate-50
					[&>h6]:text-base sm:[&>h6]:text-lg [&>h6]:font-semibold [&>h6]:mt-5 [&>h6]:mb-2 [&>h6]:text-slate-800 [&>h6]:dark:text-slate-50
					[&>p]:mb-5 [&>p]:text-base [&>p]:leading-relaxed
					[&>ul]:mb-5 [&>ul]:pl-6 [&>ol]:mb-5 [&>ol]:pl-6
					[&>li]:mb-2 [&>li]:leading-relaxed
					[&>pre]:bg-[rgba(0,0,0,0.3)] [&>pre]:border [&>pre]:border-slate-700 [&>pre]:rounded-lg [&>pre]:p-4 [&>pre]:my-6 [&>pre]:overflow-x-auto [&>pre]:text-sm
					[&>code]:bg-[rgba(255,255,255,0.08)] [&>code]:text-slate-100 [&>code]:border [&>code]:border-slate-700 [&>code]:rounded [&>code]:px-1 [&>code]:py-0.5 [&>code]:text-sm [&>code]:font-medium
					[&>a]:text-[rgb(248,249,250)] [&>a]:no-underline [&>a]:transition-colors [&>a]:hover:text-[rgba(248,249,250,0.8)]
					[&>blockquote]:border-l-4 [&>blockquote]:border-orange-500 [&>blockquote]:my-6 [&>blockquote]:pl-4 [&>blockquote]:italic [&>blockquote]:text-slate-300
					[&>table]:w-full [&>table]:border-collapse [&>table]:my-6 [&>table]:text-sm [&>table]:overflow-x-auto [&>table]:block sm:[&>table]:table
					[&>th]:border [&>th]:border-slate-200 [&>th]:dark:border-slate-700 [&>th]:p-3 [&>th]:text-left [&>th]:bg-slate-50 [&>th]:dark:bg-slate-900 [&>th]:font-semibold
					[&>td]:border [&>td]:border-slate-200 [&>td]:dark:border-slate-700 [&>td]:p-3 [&>td]:text-left
					[&>img]:rounded-lg [&>img]:shadow-sm [&>img]:my-6 [&>img]:max-w-full [&>img]:h-auto">
					<slot />
				</div>
				
				<TableOfContents />
			</article>
		</main>
		<Footer />
	</body>
</html>