---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TableOfContents from '../components/TableOfContents.astro';
import Breadcrumb from '../components/Breadcrumb.astro';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, tags = [] } = Astro.props;
---

<html lang="ko">
	<head>
		<BaseHead title={title} description={description} />
		
		<!-- 다국어 메타 태그 -->
		<meta name="language" content="Korean" />
		<meta property="og:locale" content="ko_KR" />
		<meta property="og:locale:alternate" content="en_US" />
		<meta property="og:locale:alternate" content="ja_JP" />
		
		<!-- SEO 메타 태그 개선 -->
		<meta name="article:author" content="Hun-Bot" />
		<meta name="article:published_time" content={pubDate.toISOString()} />
		{updatedDate && <meta name="article:modified_time" content={updatedDate.toISOString()} />}
		{tags && tags.map(tag => <meta name="article:tag" content={tag} />)}
		
		<!-- 추가 Open Graph 메타 태그 -->
		<meta property="og:type" content="article" />
		<meta property="article:author" content="Hun-Bot" />
		<meta property="article:published_time" content={pubDate.toISOString()} />
		{updatedDate && <meta property="article:modified_time" content={updatedDate.toISOString()} />}
		{tags && tags.map(tag => <meta property="article:tag" content={tag} />)}
		
		<!-- 블로그 포스트 구조화 데이터 -->
		<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "BlogPosting",
			"headline": title,
			"description": description,
			"image": heroImage ? new URL(heroImage.src, Astro.url).href : undefined,
			"author": {
				"@type": "Person",
				"name": "Hun-Bot",
				"url": "https://hunbot.dev",
				"sameAs": ["https://github.com/Hun-Bot2"]
			},
			"publisher": {
				"@type": "Person",
				"name": "Hun-Bot",
				"url": "https://hunbot.dev"
			},
			"datePublished": pubDate.toISOString(),
			"dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
			"mainEntityOfPage": {
				"@type": "WebPage",
				"@id": new URL(Astro.url.pathname, Astro.site).href
			},
			"url": new URL(Astro.url.pathname, Astro.site).href,
			"keywords": tags ? tags.join(", ") : undefined,
			"wordCount": undefined,
			"inLanguage": "ko-KR",
			"isAccessibleForFree": true,
			"genre": "기술 블로그",
			"about": tags ? tags.map(tag => ({
				"@type": "Thing",
				"name": tag
			})) : undefined
		}
		</script>
		
		<!-- 빵부스러기 네비게이션 구조화 데이터 -->
		<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "BreadcrumbList",
			"itemListElement": [
				{
					"@type": "ListItem",
					"position": 1,
					"name": "Home",
					"item": "https://hunbot.dev"
				},
				{
					"@type": "ListItem",
					"position": 2,
					"name": "Blog",
					"item": "https://hunbot.dev/blog"
				},
				{
					"@type": "ListItem",
					"position": 3,
					"name": title,
					"item": new URL(Astro.url.pathname, Astro.site).href
				}
			]
		}
		</script>

		<style>
			/* 수학 공식 스타일 - KaTeX 전용 */
			.prose .katex {
				font-size: 1.13em;
			}
			
			.prose .katex-display {
				margin: 2.5em 0;
				text-align: center;
			}
		</style>
	</head>

	<body class="bg-gray-50 dark:bg-gray-900">
		<Header />
		<main class="w-full max-w-none m-0 p-0">
			<article>
				<!-- Hero Image -->
				{heroImage && (
					<div class="w-full mb-10">
						<Image 
							width={1020} 
							height={510} 
							src={heroImage} 
							alt={title}
							class="block mx-auto rounded-2xl shadow-lg shadow-gray-200/50 dark:shadow-gray-800/50"
						/>
					</div>
				)}
				
				<!-- Blog Container -->
				<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
					<!-- Breadcrumb Navigation -->
					<Breadcrumb items={[
						{ name: "Home", href: "/" },
						{ name: "Blog", href: "/blog" },
						{ name: title }
					]} />
					
					<!-- Main Content -->
					<div class="prose w-full max-w-none m-0 py-6 sm:py-8 lg:py-10 px-4 sm:px-6 lg:px-8 bg-white/98 dark:bg-slate-800/98 rounded-xl sm:rounded-2xl lg:rounded-3xl shadow-lg shadow-gray-200/25 dark:shadow-gray-800/25 text-gray-800 dark:text-gray-200">
						<!-- Title Section -->
						<div class="mb-6 pb-4 text-center leading-tight">
							<!-- Date -->
							<div class="mb-3 text-gray-600 dark:text-gray-400 text-lg">
								<FormattedDate date={pubDate} />
								{updatedDate && (
									<div class="italic text-gray-500 dark:text-gray-500 text-base mt-1">
										마지막 수정: <FormattedDate date={updatedDate} />
									</div>
								)}
							</div>
							
							<!-- Title -->
							<h1 class="m-0 mb-3 font-black text-2xl sm:text-3xl lg:text-4xl xl:text-5xl tracking-tight bg-gradient-to-br from-blue-500 to-blue-800 bg-clip-text text-transparent">
								{title}
							</h1>
							
							<hr class="border-gray-300 dark:border-gray-600 my-6" />
							
							<!-- Tags -->
							{tags && tags.length > 0 && (
								<div class="flex flex-wrap gap-3 mt-5 mb-8 justify-center">
									{tags.map((tag: string) => (
										<span class="bg-blue-500 text-white px-4 py-2 rounded-full text-sm font-semibold hover:bg-blue-600 transition-colors duration-200 shadow-md shadow-blue-500/25">
											{tag}
										</span>
									))}
								</div>
							)}
						</div>
						
						<!-- Content Slot -->
						<slot />
					</div>
				</div>
				
				<!-- 플로팅 목차 -->
				<TableOfContents />
			</article>
		</main>
		<Footer />
	</body>
</html>